---
import Button from "../../../components/Button.astro";
import Nav from "../../../components/Nav.astro";
import Layout from "../../../layouts/Layout.astro";

const { lon, lat } = Astro.params;

const apiKey = import.meta.env.PUBLIC_API_KEY;
const res = await fetch(
  "http://api.weatherapi.com/v1/forecast.json?key=" +
    apiKey +
    "&q=" +
    lat +
    "," +
    lon +
    "&days=2"
);

const data = await res.json();

function getUvClass(uvIndex: any) {
  if (uvIndex >= 8) {
    return "text-red-500"; // Very high to extreme UV index
  } else if (uvIndex >= 6) {
    return "text-orange-500"; // High UV index
  } else if (uvIndex >= 3) {
    return "text-yellow-500"; // Moderate UV index
  } else {
    return "text-green-500"; // Low UV index
  }
}

function getUvText(uvIndex: any) {
  if (uvIndex >= 8) {
    return "Very high to extreme UV index";
  } else if (uvIndex >= 6) {
    return "High UV index";
  } else if (uvIndex >= 3) {
    return "Moderate UV index";
  } else {
    return "Low UV index";
  }
}

console.log(data);
---

<Layout title="weather.aapelix.dev">
  <Nav tab="search" />
  <main class="w-screen flex justify-center">
    <div class="w-2/3 mt-16">
      <div class="flex justify-between items-center">
        <div>
          <h1 class="text-4xl font-black">{data.location.name}</h1>
          <p>{data.location.country}</p>
        </div>
        <div>
          <img class="w-44 pixelated" src={data.current.condition.icon} />
          <p class="text-center text-xl">{data.current.temp_c}°C</p>
        </div>
      </div>
      <p class="mt-5">Local time</p>
      <p class="text-xl font-black">{data.location.localtime.slice(-5)}</p>
      <div class="flex flex-row gap-4 overflow-x-scroll mt-10">
        {
          data.forecast.forecastday.map((day: any) => (
            <>
              {day.hour
                .filter((hour: any) => {
                  // Convert the hour time to a Date object
                  const hourTime = new Date(hour.time.replace(" ", "T")); // Replace space with 'T' to make it a valid ISO string
                  return hourTime > new Date(); // Compare with the current time
                })
                .map((hour: any) => (
                  <div class="">
                    <p class="text-xs text-center">
                      {hour.time.slice(5, 7)}.{hour.time.slice(8, 10)}
                    </p>
                    <h1>{hour.time.slice(-5)}</h1>
                    <img class="h-12 w-auto" src={hour.condition.icon} />
                    <p class="text-center">{Math.floor(hour.temp_c)}°C</p>
                  </div>
                ))}
            </>
          ))
        }
      </div>
      <div class="relative max-w-sm">
        <div
          class="absolute inset-y-0 start-0 flex items-center ps-3.5 pointer-events-none"
        >
          <svg
            class="w-4 h-4 text-gray-500 dark:text-gray-400"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"
            ></path>
          </svg>
        </div>
        <input
          datepicker
          type="text"
          class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full ps-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          placeholder="Select date"
        />
      </div>
      <p class="mt-5 md:text-center text-left">
        Last updated: {data.current.last_updated}
      </p>
      <div
        class="flex flex-wrap gap-3 mt-1 md:justify-center justify-normal text-white"
      >
        <div
          class="md:w-52 md:h-52 sm:w-44 sm:h-44 w-40 h-40 text-white bg-black rounded-3xl flex justify-center items-center flex-col text-center"
        >
          <div class="m-3">
            <h1>Feels like</h1>
            <p class="text-xl font-black">{data.current.feelslike_c}°C</p>
          </div>
        </div>
        <div
          class="md:w-52 md:h-52 sm:w-44 flex justify-center items-center sm:h-44 w-40 h-40 bg-black rounded-3xl"
        >
          <p
            class="absolute md:-translate-y-[5.5rem] sm:-translate-y-20 -translate-y-16 text-white"
          >
            {data.current.wind_kph}km/h
          </p>
          <img
            src="/arrow2.png"
            style={{ rotate: data.current.wind_degree + "deg" }}
            alt=""
          />
        </div>
        <div
          class="md:w-52 md:h-52 sm:w-44 sm:h-44 w-40 h-40 bg-black rounded-3xl flex justify-center items-center text-center flex-col text-xl"
        >
          <h1>{getUvText(data.current.uv)}</h1>
          <p class={`${getUvClass(data.current.uv)} text-2xl`}>
            {data.current.uv}
          </p>
        </div>
        <div
          class="md:w-52 md:h-52 sm:w-44 sm:h-44 w-40 h-40 bg-black rounded-3xl flex justify-center items-center flex-col"
        >
          <p>Humidity: {data.current.humidity}%</p>
          <progress max="100" value={data.current.humidity}></progress>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  .pixelated {
    image-rendering: pixelated;
  }

  progress[value]::-webkit-progress-bar {
    background-color: #1f1f1f;
    border-radius: 7px;
  }

  progress[value] {
    -webkit-appearance: none;
    appearance: none;

    width: 90%;
    height: 20px;
    border-radius: 7px;
  }

  progress[value]::-webkit-progress-value {
    background-color: white;

    border-radius: 7px;
    background-size:
      35px 20px,
      100% 100%,
      100% 100%;
  }
</style>
